#!/bin/bash
# Database restore script for {{ app_name }}
# Generated by Ansible
# Usage: ./restore_{{ app_name }}_database.sh <backup_file.sql.gz>

set -e

DB_NAME="{{ db_name }}"
DB_USER="{{ db_user }}"
BACKUP_DIR="{{ backup_dir }}/database"

if [ $# -ne 1 ]; then
    echo "Usage: $0 <backup_file.sql.gz>"
    echo "Available backups:"
    ls -la "${BACKUP_DIR}/${DB_NAME}_"*.sql.gz 2>/dev/null || echo "No backups found"
    exit 1
fi

BACKUP_FILE="$1"

if [ ! -f "${BACKUP_FILE}" ]; then
    echo "Error: Backup file '${BACKUP_FILE}' not found"
    exit 1
fi

echo "WARNING: This will drop and recreate the database '${DB_NAME}'"
echo "Press Enter to continue or Ctrl+C to abort..."
read

echo "Starting restore of ${DB_NAME} from ${BACKUP_FILE} at $(date)"

# Drop existing database
echo "Dropping existing database..."
dropdb -U postgres "${DB_NAME}" || true

# Create fresh database
echo "Creating fresh database..."
createdb -U postgres -O "${DB_USER}" "${DB_NAME}"

# Restore from backup
echo "Restoring from backup..."
if [[ "${BACKUP_FILE}" == *.gz ]]; then
    gunzip -c "${BACKUP_FILE}" | psql -U "${DB_USER}" -h localhost "${DB_NAME}"
else
    psql -U "${DB_USER}" -h localhost "${DB_NAME}" < "${BACKUP_FILE}"
fi

if [ $? -eq 0 ]; then
    echo "Restore completed successfully at $(date)"
else
    echo "Restore failed!" >&2
    exit 1
fi